@using System.ComponentModel.DataAnnotations
@attribute [StreamRendering(false)]

@inject ColorsApiClient ColorsApi
@inject ILogger<Colors> Logger

@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Color</PageTitle>

@{
    switch (currentState)
    {
        case LightState.Stopped:
            <svg height='30' width='30'>
                <line x1='5' y1='5' x2='25' y2='25' style='stroke:black;stroke-width:2' />
                <line x1='25' y1='5' x2='5' y2='25' style='stroke:black;stroke-width:2' />
            </svg>
            break;
        case LightState.Starting:
        case LightState.Stopping:
            <svg height='30' width='30'><circle id='idLight' cx='15' cy='15' r='3' stroke='black' stroke-width='1' fill='white' /></svg>
            break;
        case LightState.LightOn:
            <svg height='30' width='30'><circle id='idLight' cx='15' cy='15' r='12' stroke='black' stroke-width='1' fill='@randomcolor?.HexCode' /></svg>
            break;
        case LightState.Error:
            <svg height='30' width='30'>
                <line x1='5' y1='5' x2='25' y2='25' style='stroke:red;stroke-width:2' />
                <line x1='25' y1='5' x2='5' y2='25' style='stroke:red;stroke-width:2' />
            </svg>
            break;
        default:
            <p>Unknown state.</p>
            break;
    }
}

@code {
    [Parameter]
    [Required]
    public ColorMediator? colorMediatorInstance { get; set; }
    [Parameter]
    [Required]
    public int lightId { get; set; }

    private ColorItem? randomcolor;
    private Random random = new Random();
    private bool loginfo = false;
    private CancellationTokenSource cts = new CancellationTokenSource();

    public enum LightState
    {
        Stopped,
        Starting,
        LightOn,
        Stopping,
        Error
    }
    private LightState currentState = LightState.Stopped;

    protected override void OnInitialized()
    {
        LogInfo("OnInitialized");

        if (colorMediatorInstance != null)
        {
            colorMediatorInstance.OnStartLights += OnStartLights;
        }

        if (colorMediatorInstance != null)
        {
            colorMediatorInstance.OnStopLights += OnStopLights;
        }

    }

    private void OnStartLights()
    {
        _ = StartLights();

        LogInfo("OnStartLights");
    }

    private void OnStopLights()
    {
        _ = StopLights();

        LogInfo("OnStopLights");

    }

    private async Task StartLights()
    {
        LogInfo($"StartLights Enter");

        if (currentState != LightState.Stopped)
        {
            LogInfo($"StartLights Not Ready");
            return;
        }


        currentState = LightState.Starting;
        await InvokeAsync(StateHasChanged);

        cts = new CancellationTokenSource();

        while (currentState == LightState.LightOn || currentState == LightState.Starting)
        {
            int randomDelay = random.Next(500, 15001);
            try
            {
                LogInfo($"ShowLights Delay {randomDelay}");
                await Task.Delay(randomDelay, cts.Token);

                if (currentState == LightState.LightOn || currentState == LightState.Starting)
                {
                    await GetRandomColor();
                    await InvokeAsync(StateHasChanged);
                    
                    colorMediatorInstance?.NotifyBumpTxn();
                }
            }
            catch (OperationCanceledException)
            {
                LogInfo($"StartLights Operation Cancelled");
            }
            catch (Exception ex)
            {
                LogInfo($"StartLights Exception: {ex.Message}");
            }
        }

        LogInfo($"StartLights Exit");

    }

    private async Task StopLights()
    {
        LogInfo($"StopLights Enter");

        currentState = LightState.Stopping;
        randomcolor = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            cts.Cancel();
        }
        catch (OperationCanceledException)
        {
            LogInfo($"StopLights Operation Cancelled");
        }
        catch (Exception ex)
        {
            LogInfo($"StopLights Exception: {ex.Message}");
        }

        currentState = LightState.Stopped;
        randomcolor = null;
        await InvokeAsync(StateHasChanged);

        colorMediatorInstance?.NotifyStopped();

        LogInfo($"StopLights Exit");

    }

    private async Task GetRandomColor()
    {
        LogInfo($"GetRandomColor {currentState} ");

        try
        {
            if (!cts.Token.IsCancellationRequested)
            {
                randomcolor = await ColorsApi.GetColorsRandomAsync(cts.Token);
                if (currentState == LightState.Starting)
                {
                    currentState = LightState.LightOn;
                }
            }
        }
        catch (OperationCanceledException)
        {
            LogInfo($"GetRandomColor Operation Cancelled");
        }
        catch (Exception ex)
        {
            LogInfo($"GetRandomColor Exception: {ex.Message}");
        }

    }

    public void Dispose()
    {
        LogInfo($"Dispose");

        _ = StopLights();

    }

    public void LogInfo(string msg)
    {
        if (loginfo) Logger.LogInformation($"{lightId} {msg}  <<<<<");
    }

}
